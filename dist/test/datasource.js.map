{"version":3,"sources":["../../src/datasource.js"],"names":["ThrukDatasource","instanceSettings","$q","backendSrv","templateSrv","q","url","withCredentials","basicAuth","name","id","requestOptions","_requestOptions","method","datasourceRequest","then","response","status","data","rest_version","message","title","match","statusText","catch","err","options","query","_parseQuery","_replaceVariables","annotation","range","scopedVars","path","table","replace","columns","split","Error","params","where","_","map","result","d","i","_handleQueryError","bind","encodeURIComponent","text","Object","values","join","value","This","x","targets","length","TableModel","target","hasColumns","when","shift","hasStats","forEach","col","op","matches","undefined","_addColumn","push","condition","limit","angular","isArray","keys","row","type","rows","_fakeTimeseries","addColumn","headers","Authorization","tmp","str","s","field","timefilter","Math","floor","from","toDate","getTime","to","regex","RegExp","groups","segments","console","log","code","error","description","steps","unix","step","columnMap","keyIndex","datapoints","alias","val","y"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class ThrukDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.url = instanceSettings.url;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n  }\n\n  // testDatasource is used on the datasource options page\n  testDatasource() {\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/thruk?columns=rest_version',\n      method: 'GET'\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(response => {\n        if(response.status === 200 && response.data && response.data.rest_version === 1) {\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n        if(response.status === 200 && response.data && response.data.match(/login\\.cgi/)) {\n          return { status: 'error', message: 'Data source connected, but no valid data received. Verify authorization.' };\n        }\n        return { status: 'error', message: response.status+\" \"+response.statusText };\n      })\n      .catch(err => {\n        if(err.status && err.status >= 400) {\n          return { status: 'error', message: 'Data source not connected: '+err.status+' '+err.statusText };\n        }\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  // annotationQuery returns annotations\n  annotationQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options.annotation.query, options.range, options.scopedVars));\n    var path = query.table.replace(/^\\//, '');\n    if(query.columns.split(/\\s*,\\s*/)[0] != \"time\") {\n      throw new Error(\"query syntax error, first column must be 'time' for annotations.\");\n    }\n    var params = {\n      columns: query.columns\n    };\n    params.q = query.where;\n\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n      params: params,\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return {\n            \"annotation\": options.annotation,\n            \"title\": d['type'],\n            \"time\": d['time']*1000,\n            \"text\": d['message'].replace(/^\\[\\d+\\]\\s+/, '').replace(/^[^:]+:\\s+/, ''),\n            \"tags\": d['type'],\n          };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // metricFindQuery gets called from variables page\n  metricFindQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options));\n    var path = query.table+\"?columns=\"+query.columns;\n    path = path.replace(/^\\//, '');\n    if(query.where) {\n      path += '&q='+encodeURIComponent(query.where)\n    }\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return { text: Object.values(d).join(';'), value: Object.values(d).join(';') };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // query gets called from table and singlestat panels\n  query(options) {\n    var This = this;\n    // we can only handle a single query right now\n    for(var x=0; x<options.targets.length; x++) {\n      var table = new TableModel();\n      var target = options.targets[x];\n      var path = target.table\n      var hasColumns = false;\n      var params = {};\n\n      if(!path) {\n        return(This.q.when([]));\n      }\n      path = path.replace(/^\\//, '');\n      path = this._replaceVariables(path, options.range, options.scopedVars);\n\n      if(!target.columns) { target.columns = []; }\n      if(target.columns[0] == '*') {\n        target.columns.shift();\n      }\n      var hasStats = false;\n      if(target.columns.length > 0) {\n        target.columns.forEach(col => {\n          if(col.match(/^(.*)\\(\\)$/)) {\n            hasStats = true;\n            return false;\n          }\n        });\n        params.columns = [];\n        var op;\n        target.columns.forEach(col => {\n          var matches = col.match(/^(.*)\\(\\)$/);\n          if(matches && matches[1]) {\n            op = matches[1];\n          } else {\n            if(op) {\n              col = op+'('+col+')';\n              op = undefined;\n            }\n            if(!hasStats) {\n              This._addColumn(table, col);\n            }\n            params.columns.push(col);\n          }\n        });\n        hasColumns = true;\n      }\n      if(target.condition) {\n        params.q = this._replaceVariables(target.condition, options.range, options.scopedVars);\n      }\n      if(target.limit) {\n        params.limit = target.limit;\n      }\n      var requestOptions = This._requestOptions({\n        url: This.url + '/r/v1/'+path,\n        method: 'GET',\n        params: params,\n      });\n      return This.backendSrv.datasourceRequest(requestOptions).then(function(result) {\n        if(!angular.isArray(result.data)) {\n          result.data = [result.data];\n        }\n        // extract columns from first result row unless specified\n        if((!hasColumns || hasStats) && result.data[0]) {\n          Object.keys(result.data[0]).forEach(col => {\n            This._addColumn(table, col);\n          });\n        }\n        // add data rows\n        _.map(result.data, (d, i) => {\n          var row = [];\n          table.columns.forEach(col => {\n            if(col.type == \"time\") {\n              row.push(d[col.text] * 1000);\n            } else {\n              row.push(d[col.text]);\n            }\n          });\n          table.rows.push(row);\n        });\n        if(target.type == \"timeseries\") {\n          return(This._fakeTimeseries(table, target, options, hasStats));\n        }\n        return({\n          data: [\n            table\n          ]\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n    }\n  }\n\n  _addColumn(table, col) {\n    if(col.match(/^(last_|next_|start_|end_|time)/)) {\n      table.addColumn({ text: col, type: 'time' });\n    } else {\n      table.addColumn({ text: col });\n    }\n  }\n\n  _requestOptions(options) {\n    options = options || {};\n    options.headers = options.headers || {};\n    if(this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if(this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n    return(options);\n  }\n\n  _parseQuery(query) {\n    var tmp = query.match(/^\\s*SELECT\\s+([\\w_,\\ ]+)\\s+FROM\\s+([\\w_\\/]+)(|\\s+WHERE\\s+(.*))(|\\s+LIMIT\\s+(\\d+))$/i);\n    if(!tmp) {\n      throw new Error(\"query syntax error, expecting: SELECT <column>[,<columns>] FROM <rest url> [WHERE <filter conditions>] [LIMIT <limi>]\");\n    }\n    return({\n      columns: tmp[1].replace(/\\s+/g, ''),\n      table:   tmp[2],\n      where:   tmp[4],\n      limit:   tmp[6],\n    });\n  }\n\n  _replaceVariables(str, range, scopedVars) {\n    str = this.templateSrv.replace(str, scopedVars, function(s) {\n      if(s && angular.isArray(s)) {\n        return(\"^(\"+s.join('|')+')$');\n      }\n      return(s);\n    });\n\n    // replace time filter\n    if(range) {\n      var matches = str.match(/(\\w+)\\s*=\\s*\\$time/);\n      if(matches && matches[1]) {\n        var field = matches[1];\n        var timefilter = \"(\"+field+ \" > \"+Math.floor(range.from.toDate().getTime()/1000);\n        timefilter    += \" AND \"+field+\" < \"+Math.floor(range.to.toDate().getTime()/1000);\n        timefilter    += \")\";\n        str = str.replace(matches[0], timefilter);\n      }\n    }\n\n    // fixup list regex filters\n    var regex   = new RegExp(/([\\w_]+)\\s*(>=|=)\\s*\"\\^\\((.*?)\\)\\$\"/);\n    var matches = str.match(regex);\n    while(matches) {\n        var groups = [];\n        var segments = matches[3].split('|');\n        segments.forEach(s => {\n          groups.push(matches[1]+' '+matches[2]+' \"'+s+'\"');\n        })\n        str = str.replace(matches[0], '('+groups.join(' OR ')+')');\n        matches = str.match(regex);\n    }\n\n    return(str);\n  }\n\n  _handleQueryError(err) {\n    console.log(err);\n    if(err.data && err.data.code && err.data.code >= 400) {\n      var error = \"query error: \"+err.data.message;\n      if(err.data.description) {\n        error += \" - \"+err.data.description;\n      }\n      throw new Error(error);\n    }\n    if(err.status && err.status > 400) {\n      throw new Error(\"query error: \"+err.status+\" - \"+err.statusText);\n    }\n    throw new Error(err);\n    return [];\n  }\n\n  _fakeTimeseries(table, target, options, hasStats) {\n    var data = {data:[]};\n    var steps = 10;\n    var from  = options.range.from.unix();\n    var to    = options.range.to.unix();\n    var step  = Math.floor((to-from)/steps);\n\n    // create timeseries based on group by keys\n    if(table.rows.length > 1 || (hasStats && table.columnMap[\":KEY\"])) {\n      var keyIndex = 0;\n      var x = 0;\n      table.columns.forEach(col => {\n        if(col.text == ':KEY') {\n          keyIndex = x;\n          return false;\n        }\n        x++;\n      });\n      table.rows.forEach(row => {\n        var datapoints = [];\n        var alias      = row[keyIndex];\n        var val        = row[1];\n        if(row.length > 2) {\n          throw new Error(\"timeseries from grouped stats queries with more than 2 columns are not supported.\");\n        }\n        for(var y = 0; y < steps; y++) {\n          datapoints.push([\n            val,\n            (from+(step*y))*1000\n          ]);\n        }\n        data.data.push({\n          \"target\": alias,\n          \"datapoints\": datapoints\n        });\n      });\n      return(data);\n    }\n\n    var x = 0;\n    table.columns.forEach(col => {\n      var datapoints = [];\n      var val = table.rows[0][x];\n      for(var y = 0; y < steps; y++) {\n        datapoints.push([\n          val,\n          (from+(step*y))*1000\n        ]);\n      }\n      data.data.push({\n        \"target\": col.text,\n        \"datapoints\": datapoints\n      });\n      x++;\n    });\n    return(data);\n  }\n}\n"]}